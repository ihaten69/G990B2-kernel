name: Build S21FE Kernel with Custom GLIBC Docker and Repo Fix

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ARCH: arm64
      SUBARCH: arm64
      DEVICE_DEFCONFIG: r9q_eur_openx2_defconfig
      TOOLCHAIN_DIR: ${{ github.workspace }}/toolchains/neutron-clang

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4

      - name: Create Dockerfile for Custom GLIBC 2.38 and Repo Fix
        run: |
          cat > Dockerfile <<EOF
          FROM ubuntu:23.04

          RUN sed -i 's|http://archive.ubuntu.com/ubuntu|http://old-releases.ubuntu.com/ubuntu|g' /etc/apt/sources.list && \
              sed -i 's|http://security.ubuntu.com/ubuntu|http://old-releases.ubuntu.com/ubuntu|g' /etc/apt/sources.list && \
              apt-get update && apt-get install -y \
                build-essential wget curl zstd git bc bison flex libncurses5-dev python3 unzip zip

          # Download and build GLIBC 2.38
          RUN wget http://ftp.gnu.org/gnu/libc/glibc-2.38.tar.gz && \
              tar -xzf glibc-2.38.tar.gz && \
              cd glibc-2.38 && \
              mkdir build && cd build && \
              ../configure --prefix=/usr && \
              make -j\$(nproc) && make install && \
              cd ../.. && rm -rf glibc-2.38 glibc-2.38.tar.gz

          ENV PATH="/root/toolchains/neutron-clang/bin:\$PATH"
          EOF

      - name: Build Custom Docker Image
        run: docker build -t custom-neutron-clang-glibc .

      - name: Run Kernel Build in Custom Docker Container
        run: |
          mkdir -p $TOOLCHAIN_DIR

          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace custom-neutron-clang-glibc /bin/bash -c "
            echo 'Downloading AntMan and syncing Neutron Clang...'
            mkdir -p /root/toolchains/neutron-clang &&
            cd /root/toolchains/neutron-clang &&
            curl -LO https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman &&
            chmod +x antman &&
            ./antman -S &&

            export PATH=/root/toolchains/neutron-clang/bin:\$PATH &&

            echo 'Verifying defconfigs in vendor...'
            ls arch/arm64/configs/vendor/ &&

            echo 'Configuring kernel with vendor/$DEVICE_DEFCONFIG...'
            make O=out vendor/\$DEVICE_DEFCONFIG CC=clang LLVM=1 LLVM_IAS=1 &&

            echo 'Building kernel...'
            make O=out CC=clang LLVM=1 LLVM_IAS=1 -j\$(nproc) &&

            echo 'Packaging kernel...'
            git clone https://github.com/osm0sis/AnyKernel3.git &&
            cp out/arch/arm64/boot/Image* AnyKernel3/ &&
            cd AnyKernel3 &&
            zip -r9 ../S21FE-Kernel-Neutron.zip * &&

            echo 'Kernel build complete.'
          "

      - name: Upload Kernel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: S21FE-Kernel-Neutron
          path: S21FE-Kernel-Neutron.zip
